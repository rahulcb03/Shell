My shell | Rahul Badiani & Suchit Kalluru 
Purpose: Create a basic command line shell "mysh.c" using only POSIX Functions. Has two modes "Batch" & "Interactive"
    - Batch: Allows the user to input a file after the command './mysh' in order to execute commands from within the file
    - Interactive : Allows the user to input multiple generic commands(one process at a time) imitating a basic command line shell found on common OS
    
The only difference between the two modes is that the fd is changed when reading the commands. They both use the same input loop to read the commands and the same tokenizing algorithm. 


This program simulates a shell environment that can run executables with arguments and allows for redirects, pipes, and wildcards.

The mysh.c is the main program and the other programs can be used to test the shell.

Redirects
    - using the '>' token will allow the user to redirect the standard output into a separate file
        - if the specified file does not exist it will be created
    - using the '<' token will allow the user to redirect the standard input from a file
        - if the specified file does not exist the user will be prompted with an error
Pipes
    - using the '|' token will allow the user to redirect the standard output of the first command to become the standard input of the second command
WildCards 
    - wildcards allow the user to specify multiple files/directories by using the '*' token 
    - Example: The command "cat *.txt" will print the contents of all the files in the current directory ending with ".txt"
    - this can also work with directories so "*/*.txt" would be valid because it will go through all the directories within the current directory and find all files that end in ".txt"



Note: This program is designed to function with all the executables that are accessible in the following directories
"/usr/local/sbin", "/usr/local/bin", "/usr/sbin", "/usr/bin", "/sbin","/bin"
